{"mappings":"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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-939fd3bdd4418c6f.js","src/js/shoppingListModules.js","src/js/shoppingList/pagination.js","node_modules/@parcel/runtime-js/lib/runtime-c1d1ff3cdd26a0ba.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire0688\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire0688\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"ifJdc\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $d49cb2d7b03f6a77$export$6503ec6e8aabbaf, (v) => $d49cb2d7b03f6a77$export$6503ec6e8aabbaf = v);\nvar $d49cb2d7b03f6a77$export$6503ec6e8aabbaf;\nvar $d49cb2d7b03f6a77$export$f7ad0328861e2f03;\n\"use strict\";\nvar $d49cb2d7b03f6a77$var$mapping = new Map();\nfunction $d49cb2d7b03f6a77$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$d49cb2d7b03f6a77$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $d49cb2d7b03f6a77$var$resolve(id) {\n    var resolved = $d49cb2d7b03f6a77$var$mapping.get(id);\n    if (resolved == null) throw new Error(\"Could not resolve bundle with id \" + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$d49cb2d7b03f6a77$export$6503ec6e8aabbaf = $d49cb2d7b03f6a77$var$register;\n$d49cb2d7b03f6a77$export$f7ad0328861e2f03 = $d49cb2d7b03f6a77$var$resolve;\n\n});\n\nvar $d37283e0d93432d5$exports = {};\n\n(parcelRequire(\"ifJdc\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse('[\"asDQL\",\"shopping-list.91ae8a51.js\",\"b2CSN\",\"books.9047a673.png\",\"2FlHe\",\"shopping-list.cadf448a.js\",\"34yHB\",\"shopping-list.runtime.36f3c370.js\"]'));\n\nparcelRequire(\"85S5k\");\n\nvar $85S5k = parcelRequire(\"85S5k\");\n/**\n * The current page number being displayed.\n * @type {number}\n */ let $35280ef0f626b0b3$var$currentPage = 1;\n/**\n * The number of books to display per page.\n * @type {number}\n */ const $35280ef0f626b0b3$var$perPage = 3;\nvar $7b4c41718119dc57$exports = {};\n$7b4c41718119dc57$exports = new URL(\"books.9047a673.png\", import.meta.url).toString();\n\n\n/**\n * Updates the displayed books and pagination based on the specified page and items per page.\n * @param {number} page - The page number to display.\n * @param {number} perPage - The number of books to display per page.\n * @returns {void}\n */ const $35280ef0f626b0b3$var$updateDisplayedBooks = (page, perPage)=>{\n    // Retrieve all books from localStorage\n    const storedBooks = (0, $85S5k.getBooksFromLocalStorage)();\n    // Check if there are any books\n    if (storedBooks.length === 0) {\n        // If no books, display a message and clear the container\n        const container = document.querySelector(\".books-container\");\n        container.innerHTML = \"\";\n        const imageBooks = new URL($7b4c41718119dc57$exports).href;\n        // Display an empty message with an image\n        const emptyMessageMarkup = `\n      <div class=\"book-message\">\n        <p>This page is empty, add some books and proceed to order.</p>\n        <img class=\"books-img\" src=\"${imageBooks}\" alt=\"books\" />\n      </div>\n    `;\n        container.innerHTML = emptyMessageMarkup;\n        document.querySelector(\".pagination\").style.display = \"none\";\n        return;\n    } else {\n        // Display books and update pagination\n        (0, $85S5k.displayBooksFromLocalStorage)(page, perPage);\n        const totalPages = Math.ceil(storedBooks.length / perPage);\n        const maxVisiblePages = 3;\n        $35280ef0f626b0b3$var$generatePageNumbers(totalPages, page, maxVisiblePages);\n        $35280ef0f626b0b3$var$updatePaginationButtons(page, perPage);\n    }\n};\n/**\n * Removes a book from localStorage and updates the displayed books and pagination.\n * @param {string} bookId - The ID of the book to be removed.\n * @param {number} currentPage - The current page number.\n * @param {number} perPage - The number of books to display per page.\n * @returns {void}\n */ const $35280ef0f626b0b3$var$removeBookAndUpdate = (bookId, currentPage, perPage)=>{\n    // Remove the book from localStorage\n    (0, $85S5k.removeFromLocalStorage)(bookId);\n    // Update the displayed books and pagination\n    $35280ef0f626b0b3$var$updateDisplayedBooks(currentPage, perPage);\n};\n// Get the container element for books\nconst $35280ef0f626b0b3$var$container = document.querySelector(\".books-container\");\n// Check if the container exists\nif ($35280ef0f626b0b3$var$container) // Add a click event listener to the container\n$35280ef0f626b0b3$var$container.addEventListener(\"click\", (event)=>{\n    const deleteButton = event.target.closest(\".button-delete\");\n    if (deleteButton) {\n        const bookId = deleteButton.getAttribute(\"data-book-id\");\n        $35280ef0f626b0b3$var$removeBookAndUpdate(bookId, $35280ef0f626b0b3$var$currentPage, $35280ef0f626b0b3$var$perPage);\n    }\n});\n/**\n * Updates the state of pagination buttons based on the current page and items per page.\n * @param {number} currentPage - The current page number.\n * @param {number} perPage - The number of books to display per page.\n * @returns {void}\n */ const $35280ef0f626b0b3$var$updatePaginationButtons = (currentPage, perPage)=>{\n    const prevPageBtn = document.getElementById(\"prevPageBtn\");\n    const nextPageBtn = document.getElementById(\"nextPageBtn\");\n    // Disable the \"Previous\" button if on the first page\n    prevPageBtn.disabled = currentPage === 1;\n    // Disable the \"Next\" button if on the last page or no books in localStorage\n    const storedBooks = (0, $85S5k.getBooksFromLocalStorage)();\n    nextPageBtn.disabled = currentPage * perPage >= storedBooks.length || storedBooks.length === 0;\n};\n// Add a click event listener for the \"Previous\" button\ndocument.getElementById(\"prevPageBtn\").addEventListener(\"click\", ()=>{\n    $35280ef0f626b0b3$var$currentPage = Math.max(1, $35280ef0f626b0b3$var$currentPage - 1);\n    $35280ef0f626b0b3$var$updateDisplayedBooks($35280ef0f626b0b3$var$currentPage, $35280ef0f626b0b3$var$perPage);\n});\n// Add a click event listener for the \"Next\" button\ndocument.getElementById(\"nextPageBtn\").addEventListener(\"click\", ()=>{\n    const storedBooks = (0, $85S5k.getBooksFromLocalStorage)();\n    const totalPages = Math.ceil(storedBooks.length / $35280ef0f626b0b3$var$perPage);\n    $35280ef0f626b0b3$var$currentPage = Math.min(totalPages, $35280ef0f626b0b3$var$currentPage + 1);\n    $35280ef0f626b0b3$var$updateDisplayedBooks($35280ef0f626b0b3$var$currentPage, $35280ef0f626b0b3$var$perPage);\n});\n/**\n * Generates and updates the page numbers for pagination.\n * @param {number} totalPages - The total number of pages.\n * @param {number} currentPage - The current page number.\n * @param {number} maxVisiblePages - The maximum number of visible pages.\n * @returns {void}\n */ const $35280ef0f626b0b3$var$generatePageNumbers = (totalPages, currentPage, maxVisiblePages)=>{\n    const pageNumbersContainer = document.getElementById(\"pageNumbers\");\n    pageNumbersContainer.innerHTML = \"\";\n    if (totalPages <= maxVisiblePages) // If total pages are less than or equal to the maximum visible pages, create buttons for all pages\n    for(let i = 1; i <= totalPages; i++)$35280ef0f626b0b3$var$createPageButton(i, currentPage);\n    else {\n        // If total pages are more than the maximum visible pages, create buttons for first, last, and ellipsis\n        const visiblePages = $35280ef0f626b0b3$var$calculateVisiblePages(currentPage, totalPages, maxVisiblePages);\n        if (!visiblePages.includes(1)) {\n            // If the first page is not in visible pages, create an ellipsis button\n            const ellipsisButtonStart = document.createElement(\"button\");\n            ellipsisButtonStart.textContent = \"...\";\n            ellipsisButtonStart.disabled = true;\n            pageNumbersContainer.appendChild(ellipsisButtonStart);\n        }\n        for (const page of visiblePages)$35280ef0f626b0b3$var$createPageButton(page, currentPage);\n        if (!visiblePages.includes(totalPages)) {\n            // If the last page is not in visible pages, create an ellipsis button\n            const ellipsisButtonEnd = document.createElement(\"button\");\n            ellipsisButtonEnd.textContent = \"...\";\n            ellipsisButtonEnd.disabled = true;\n            pageNumbersContainer.appendChild(ellipsisButtonEnd);\n        }\n    }\n};\n/**\n * Creates a button with the specified page number and adds a click event listener to update displayed books.\n * @param {number} pageNumber - The page number for the button.\n * @param {number} currentPage - The current page number.\n * @returns {void}\n */ const $35280ef0f626b0b3$var$createPageButton = (pageNumber, currentPage)=>{\n    const pageNumbersContainer = document.getElementById(\"pageNumbers\");\n    const pageButton = document.createElement(\"button\");\n    pageButton.textContent = pageNumber;\n    pageButton.addEventListener(\"click\", ()=>{\n        currentPage = pageNumber;\n        $35280ef0f626b0b3$var$updateDisplayedBooks(currentPage, $35280ef0f626b0b3$var$perPage);\n    });\n    if (pageNumber === currentPage) pageButton.classList.add(\"active\");\n    pageNumbersContainer.appendChild(pageButton);\n};\n/**\n * Calculates the visible pages based on the current page, total pages, and maximum visible pages.\n * @param {number} currentPage - The current page number.\n * @param {number} totalPages - The total number of pages.\n * @param {number} maxVisiblePages - The maximum number of visible pages.\n * @returns {number[]} - An array of visible page numbers.\n */ const $35280ef0f626b0b3$var$calculateVisiblePages = (currentPage, totalPages, maxVisiblePages)=>{\n    const halfVisible = Math.floor(maxVisiblePages / 2);\n    let startPage = Math.max(1, currentPage - halfVisible);\n    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\n    if (endPage - startPage + 1 < maxVisiblePages) endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\n    if (endPage === totalPages) startPage = Math.max(1, endPage - maxVisiblePages + 1);\n    return Array.from({\n        length: endPage - startPage + 1\n    }, (_, index)=>startPage + index);\n};\n// Add a click event listener for the \"Go to first page\" button\ndocument.getElementById(\"firstPageBtn\").addEventListener(\"click\", ()=>{\n    $35280ef0f626b0b3$var$currentPage = 1;\n    $35280ef0f626b0b3$var$updateDisplayedBooks($35280ef0f626b0b3$var$currentPage, $35280ef0f626b0b3$var$perPage);\n});\n// Add a click event listener for the \"Go to last page\" button\ndocument.getElementById(\"lastPageBtn\").addEventListener(\"click\", ()=>{\n    const storedBooks = (0, $85S5k.getBooksFromLocalStorage)();\n    const totalPages = Math.ceil(storedBooks.length / $35280ef0f626b0b3$var$perPage);\n    $35280ef0f626b0b3$var$currentPage = totalPages;\n    $35280ef0f626b0b3$var$updateDisplayedBooks($35280ef0f626b0b3$var$currentPage, $35280ef0f626b0b3$var$perPage);\n});\n// Initial update of displayed books and pagination\n$35280ef0f626b0b3$var$updateDisplayedBooks($35280ef0f626b0b3$var$currentPage, $35280ef0f626b0b3$var$perPage);\n\n\n\n\n//# sourceMappingURL=shopping-list.91ae8a51.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"asDQL\\\",\\\"shopping-list.91ae8a51.js\\\",\\\"b2CSN\\\",\\\"books.9047a673.png\\\",\\\"2FlHe\\\",\\\"shopping-list.cadf448a.js\\\",\\\"34yHB\\\",\\\"shopping-list.runtime.36f3c370.js\\\"]\"));","import './shoppingList/localStorage.js';\nimport './shoppingList/pagination.js';\n","import {\n  getBooksFromLocalStorage,\n  displayBooksFromLocalStorage,\n  removeFromLocalStorage,\n} from './localStorage.js';\n\n/**\n * The current page number being displayed.\n * @type {number}\n */\nlet currentPage = 1;\n\n/**\n * The number of books to display per page.\n * @type {number}\n */\nconst perPage = 3;\n\n/**\n * Updates the displayed books and pagination based on the specified page and items per page.\n * @param {number} page - The page number to display.\n * @param {number} perPage - The number of books to display per page.\n * @returns {void}\n */\nconst updateDisplayedBooks = (page, perPage) => {\n  // Retrieve all books from localStorage\n  const storedBooks = getBooksFromLocalStorage();\n\n  // Check if there are any books\n  if (storedBooks.length === 0) {\n    // If no books, display a message and clear the container\n    const container = document.querySelector('.books-container');\n    container.innerHTML = '';\n\n    const imageBooks = new URL('/src/images/books.png', import.meta.url).href;\n\n    // Display an empty message with an image\n    const emptyMessageMarkup = `\n      <div class=\"book-message\">\n        <p>This page is empty, add some books and proceed to order.</p>\n        <img class=\"books-img\" src=\"${imageBooks}\" alt=\"books\" />\n      </div>\n    `;\n\n    container.innerHTML = emptyMessageMarkup;\n\n    document.querySelector('.pagination').style.display = 'none';\n\n    return;\n  } else {\n    // Display books and update pagination\n    displayBooksFromLocalStorage(page, perPage);\n    const totalPages = Math.ceil(storedBooks.length / perPage);\n    const maxVisiblePages = 3;\n    generatePageNumbers(totalPages, page, maxVisiblePages);\n    updatePaginationButtons(page, perPage);\n  }\n};\n\n/**\n * Removes a book from localStorage and updates the displayed books and pagination.\n * @param {string} bookId - The ID of the book to be removed.\n * @param {number} currentPage - The current page number.\n * @param {number} perPage - The number of books to display per page.\n * @returns {void}\n */\nconst removeBookAndUpdate = (bookId, currentPage, perPage) => {\n  // Remove the book from localStorage\n  removeFromLocalStorage(bookId);\n  // Update the displayed books and pagination\n  updateDisplayedBooks(currentPage, perPage);\n};\n\n// Get the container element for books\nconst container = document.querySelector('.books-container');\n\n// Check if the container exists\nif (container) {\n  // Add a click event listener to the container\n  container.addEventListener('click', event => {\n    const deleteButton = event.target.closest('.button-delete');\n\n    if (deleteButton) {\n      const bookId = deleteButton.getAttribute('data-book-id');\n      removeBookAndUpdate(bookId, currentPage, perPage);\n    }\n  });\n}\n\n/**\n * Updates the state of pagination buttons based on the current page and items per page.\n * @param {number} currentPage - The current page number.\n * @param {number} perPage - The number of books to display per page.\n * @returns {void}\n */\nconst updatePaginationButtons = (currentPage, perPage) => {\n  const prevPageBtn = document.getElementById('prevPageBtn');\n  const nextPageBtn = document.getElementById('nextPageBtn');\n\n  // Disable the \"Previous\" button if on the first page\n  prevPageBtn.disabled = currentPage === 1;\n\n  // Disable the \"Next\" button if on the last page or no books in localStorage\n  const storedBooks = getBooksFromLocalStorage();\n  nextPageBtn.disabled = currentPage * perPage >= storedBooks.length || storedBooks.length === 0;\n};\n\n// Add a click event listener for the \"Previous\" button\ndocument.getElementById('prevPageBtn').addEventListener('click', () => {\n  currentPage = Math.max(1, currentPage - 1);\n  updateDisplayedBooks(currentPage, perPage);\n});\n\n// Add a click event listener for the \"Next\" button\ndocument.getElementById('nextPageBtn').addEventListener('click', () => {\n  const storedBooks = getBooksFromLocalStorage();\n  const totalPages = Math.ceil(storedBooks.length / perPage);\n  currentPage = Math.min(totalPages, currentPage + 1);\n  updateDisplayedBooks(currentPage, perPage);\n});\n\n/**\n * Generates and updates the page numbers for pagination.\n * @param {number} totalPages - The total number of pages.\n * @param {number} currentPage - The current page number.\n * @param {number} maxVisiblePages - The maximum number of visible pages.\n * @returns {void}\n */\nconst generatePageNumbers = (totalPages, currentPage, maxVisiblePages) => {\n  const pageNumbersContainer = document.getElementById('pageNumbers');\n  pageNumbersContainer.innerHTML = '';\n\n  if (totalPages <= maxVisiblePages) {\n    // If total pages are less than or equal to the maximum visible pages, create buttons for all pages\n    for (let i = 1; i <= totalPages; i++) {\n      createPageButton(i, currentPage);\n    }\n  } else {\n    // If total pages are more than the maximum visible pages, create buttons for first, last, and ellipsis\n    const visiblePages = calculateVisiblePages(currentPage, totalPages, maxVisiblePages);\n\n    if (!visiblePages.includes(1)) {\n      // If the first page is not in visible pages, create an ellipsis button\n      const ellipsisButtonStart = document.createElement('button');\n      ellipsisButtonStart.textContent = '...';\n      ellipsisButtonStart.disabled = true;\n      pageNumbersContainer.appendChild(ellipsisButtonStart);\n    }\n\n    for (const page of visiblePages) {\n      createPageButton(page, currentPage);\n    }\n\n    if (!visiblePages.includes(totalPages)) {\n      // If the last page is not in visible pages, create an ellipsis button\n      const ellipsisButtonEnd = document.createElement('button');\n      ellipsisButtonEnd.textContent = '...';\n      ellipsisButtonEnd.disabled = true;\n      pageNumbersContainer.appendChild(ellipsisButtonEnd);\n    }\n  }\n};\n\n/**\n * Creates a button with the specified page number and adds a click event listener to update displayed books.\n * @param {number} pageNumber - The page number for the button.\n * @param {number} currentPage - The current page number.\n * @returns {void}\n */\nconst createPageButton = (pageNumber, currentPage) => {\n  const pageNumbersContainer = document.getElementById('pageNumbers');\n\n  const pageButton = document.createElement('button');\n  pageButton.textContent = pageNumber;\n  pageButton.addEventListener('click', () => {\n    currentPage = pageNumber;\n    updateDisplayedBooks(currentPage, perPage);\n  });\n\n  if (pageNumber === currentPage) {\n    pageButton.classList.add('active');\n  }\n\n  pageNumbersContainer.appendChild(pageButton);\n};\n\n/**\n * Calculates the visible pages based on the current page, total pages, and maximum visible pages.\n * @param {number} currentPage - The current page number.\n * @param {number} totalPages - The total number of pages.\n * @param {number} maxVisiblePages - The maximum number of visible pages.\n * @returns {number[]} - An array of visible page numbers.\n */\nconst calculateVisiblePages = (currentPage, totalPages, maxVisiblePages) => {\n  const halfVisible = Math.floor(maxVisiblePages / 2);\n  let startPage = Math.max(1, currentPage - halfVisible);\n  let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\n\n  if (endPage - startPage + 1 < maxVisiblePages) {\n    endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\n  }\n\n  if (endPage === totalPages) {\n    startPage = Math.max(1, endPage - maxVisiblePages + 1);\n  }\n\n  return Array.from({ length: endPage - startPage + 1 }, (_, index) => startPage + index);\n};\n\n// Add a click event listener for the \"Go to first page\" button\ndocument.getElementById('firstPageBtn').addEventListener('click', () => {\n  currentPage = 1;\n  updateDisplayedBooks(currentPage, perPage);\n});\n\n// Add a click event listener for the \"Go to last page\" button\ndocument.getElementById('lastPageBtn').addEventListener('click', () => {\n  const storedBooks = getBooksFromLocalStorage();\n  const totalPages = Math.ceil(storedBooks.length / perPage);\n  currentPage = totalPages;\n  updateDisplayedBooks(currentPage, perPage);\n});\n\n// Initial update of displayed books and pagination\nupdateDisplayedBooks(currentPage, perPage);\n","module.exports = new __parcel__URL__(\"books.9047a673.png\").toString();"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$d49cb2d7b03f6a77$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$d49cb2d7b03f6a77$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","toString","JSON","parse","$85S5k","$35280ef0f626b0b3$var$currentPage","$7b4c41718119dc57$exports","$35280ef0f626b0b3$var$updateDisplayedBooks","page","perPage","storedBooks","getBooksFromLocalStorage","container","document","querySelector","innerHTML","imageBooks","href","emptyMessageMarkup","style","display","displayBooksFromLocalStorage","$35280ef0f626b0b3$var$generatePageNumbers","Math","ceil","$35280ef0f626b0b3$var$updatePaginationButtons","$35280ef0f626b0b3$var$removeBookAndUpdate","bookId","currentPage","removeFromLocalStorage","$35280ef0f626b0b3$var$container","addEventListener","event","deleteButton","target","closest","getAttribute","prevPageBtn","getElementById","nextPageBtn","disabled","max","min","totalPages","maxVisiblePages","pageNumbersContainer","$35280ef0f626b0b3$var$createPageButton","visiblePages","$35280ef0f626b0b3$var$calculateVisiblePages","includes","ellipsisButtonStart","createElement","textContent","appendChild","ellipsisButtonEnd","pageNumber","pageButton","classList","add","startPage","floor","endPage","Array","from","_","index"],"version":3,"file":"shopping-list.91ae8a51.js.map"}