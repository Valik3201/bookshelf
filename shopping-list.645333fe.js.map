{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,I,E,E,SCEA,IAAM,EAAoB,SAAS,aAAa,CAAC,eAC3C,EAA2B,SAAS,aAAa,CAAC,+BAClD,EAA6B,SAAS,aAAa,CAAC,8BACpD,EAA4B,SAAS,aAAa,CAAC,6BACnD,EAAc,SAAS,aAAa,CAAC,8BACrC,EAAiB,SAAS,aAAa,CAAC,iCACxC,EAAa,SAAS,aAAa,CAAC,6BACpC,EAAY,SAAS,aAAa,CAAC,4BAEnC,EAAe,AAAA,CAAA,EAAA,EAAA,wBAAuB,AAAvB,IAMjB,EAAa,KAAK,IAAI,CAAC,AAFS,EAAa,MAAM,CAFtC,GAMb,EAAc,EAGlB,GAAI,EAA0B,CAC5B,IAAK,IAAI,EAAI,EAAG,GAAK,EAAY,IAAK,CACpC,GAAI,EAAa,MAAM,EAAI,EACzB,OAEF,IAAM,EAAa,EACb,EAAS,SAAS,aAAa,CAAC,UACtC,EAAO,SAAS,CAAC,GAAG,CAAC,kBACrB,EAAO,SAAS,CAAC,GAAG,CAAC,yBACrB,EAAO,WAAW,CAAG,EAErB,EAA0B,GAC1B,EAA0B,GAE1B,EAAO,gBAAgB,CAAC,QAAS,KAC/B,EAAc,EACd,EAAwB,GACxB,EAAwB,EAC1B,GACA,EAAyB,WAAW,CAAC,EACvC,CAGI,EAAyB,UAAU,EACrC,EAAyB,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,UAGpD,EAAkB,gBAAgB,CAAC,QAGrC,SAAwD,CAAK,EAC3D,IAAM,EAAc,SAAS,aAAa,CAAC,WAE3C,GADA,QAAQ,GAAG,CAAC,EAAM,MAAM,EACpB,AAAyB,WAAzB,EAAM,MAAM,CAAC,OAAO,CAIxB,OAAQ,EAAM,MAAM,EAClB,KAAK,EACC,EAAc,IAChB,IACA,EAAwB,GAExB,EAAY,SAAS,CAAC,MAAM,CAAC,UAC7B,EAAY,sBAAsB,CAAC,SAAS,CAAC,GAAG,CAAC,WAEnD,KAEF,MAAK,EACC,EAAc,IAChB,IACA,EAAwB,GAExB,EAAY,SAAS,CAAC,MAAM,CAAC,UAC7B,EAAY,kBAAkB,CAAC,SAAS,CAAC,GAAG,CAAC,WAE/C,KAEF,MAAK,EACH,EAAc,EACd,EAAqB,GACrB,EAAwB,GACxB,EAAyB,EAAyB,UAAU,EAC5D,KAEF,MAAK,EACH,EAAc,EACd,EAAqB,GACrB,EAAwB,GACxB,EAAyB,EAAyB,gBAAgB,CAItE,CACF,EA9CA,CAuDA,SAAS,EAAwB,CAAO,EAClC,GACF,CAAA,EAAQ,QAAQ,CAAG,CAAA,CADrB,CAGF,CAEA,SAAS,EAAqB,CAAO,EAC/B,GACF,CAAA,EAAQ,QAAQ,CAAG,CAAA,CADrB,CAGF,CAEA,SAAS,EAA0B,CAAO,EACpC,GACF,CAAA,EAAQ,KAAK,CAAC,OAAO,CAAG,MAD1B,CAGF,CAEA,SAAS,EAAyB,CAAO,EACvC,IAAM,EAAc,SAAS,aAAa,CAAC,WAEvC,GACF,EAAY,SAAS,CAAC,MAAM,CAAC,UAG3B,GACF,EAAQ,SAAS,CAAC,GAAG,CAAC,SAE1B,C,G,E,S,E","sources":["<anon>","src/js/pagination.js","src/js/shoppingListModules.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire0688\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire0688\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"g1uI7\", function(module, exports) {\n\nvar $lthku = parcelRequire(\"lthku\");\nconst paginationSection = document.querySelector(\".pagination\");\nconst paginationContainerPages = document.querySelector(\".pagination_container-pages\");\nconst paginationContainerBackBtn = document.querySelector(\".pagination_container-back\");\nconst paginationContainerEndBtn = document.querySelector(\".pagination_container-end\");\nconst startButton = document.querySelector(\"button[name='startButton']\");\nconst previousButton = document.querySelector(\"button[name='previousButton']\");\nconst nextButton = document.querySelector(\"button[name='nextButton']\");\nconst endButton = document.querySelector(\"button[name='endButton']\");\nconst shoppingList = (0, $lthku.getBooksFromLocalStorage)();\nconst pageSize = 3;\nconst numberOfItemsInLocalStorage = shoppingList.length;\nlet totalPages = Math.ceil(numberOfItemsInLocalStorage / pageSize);\nlet currentPage = 1;\n// Check if paginationContainerPages is not null before interacting with it\nif (paginationContainerPages) {\n    for(let i = 1; i <= totalPages; i++){\n        if (shoppingList.length <= 3) return;\n        const pageNumber = i;\n        const button = document.createElement(\"button\");\n        button.classList.add(\"pagination_btn\");\n        button.classList.add(\"pagination_btn--pages\");\n        button.textContent = i;\n        activDisplayFlexOnElement(paginationContainerBackBtn);\n        activDisplayFlexOnElement(paginationContainerEndBtn);\n        button.addEventListener(\"click\", ()=>{\n            currentPage = pageNumber;\n            removeDisableforElement(startButton);\n            removeDisableforElement(endButton);\n        });\n        paginationContainerPages.appendChild(button);\n    }\n    // Check if paginationContainerPages has child nodes before accessing the first child\n    if (paginationContainerPages.firstChild) paginationContainerPages.firstChild.classList.add(\"active\");\n    paginationSection.addEventListener(\"click\", handlerPaginationButtonsStartPreviousNextStart);\n}\nfunction handlerPaginationButtonsStartPreviousNextStart(event) {\n    const activButton = document.querySelector(\".active\");\n    console.log(event.target);\n    if (event.target.tagName !== \"BUTTON\") return;\n    switch(event.target){\n        case previousButton:\n            if (currentPage > 1) {\n                currentPage--;\n                removeDisableforElement(endButton);\n                activButton.classList.remove(\"active\");\n                activButton.previousElementSibling.classList.add(\"active\");\n            }\n            break;\n        case nextButton:\n            if (currentPage < totalPages) {\n                currentPage++;\n                removeDisableforElement(startButton);\n                activButton.classList.remove(\"active\");\n                activButton.nextElementSibling.classList.add(\"active\");\n            }\n            break;\n        case startButton:\n            currentPage = 1;\n            addDisableforElement(startButton);\n            removeDisableforElement(endButton);\n            highlighteTheCurrentPage(paginationContainerPages.firstChild);\n            break;\n        case endButton:\n            currentPage = totalPages;\n            addDisableforElement(endButton);\n            removeDisableforElement(startButton);\n            highlighteTheCurrentPage(paginationContainerPages.lastElementChild);\n            break;\n        default:\n            break;\n    }\n}\nfunction handleButtonPaginationContainerPages(event) {\n    if (event.target.tagName !== \"BUTTON\") return;\n    highlighteTheCurrentPage(event.target);\n}\nfunction removeDisableforElement(element) {\n    if (element) element.disabled = false;\n}\nfunction addDisableforElement(element) {\n    if (element) element.disabled = true;\n}\nfunction activDisplayFlexOnElement(element) {\n    if (element) element.style.display = \"flex\";\n}\nfunction highlighteTheCurrentPage(element) {\n    const activButton = document.querySelector(\".active\");\n    if (activButton) activButton.classList.remove(\"active\");\n    if (element) element.classList.add(\"active\");\n}\n\n});\n\nparcelRequire(\"lthku\");\nparcelRequire(\"g1uI7\");\n\n\n//# sourceMappingURL=shopping-list.645333fe.js.map\n","import { getBooksFromLocalStorage } from './localStorage.js';\n\nconst paginationSection = document.querySelector('.pagination');\nconst paginationContainerPages = document.querySelector('.pagination_container-pages');\nconst paginationContainerBackBtn = document.querySelector('.pagination_container-back');\nconst paginationContainerEndBtn = document.querySelector('.pagination_container-end');\nconst startButton = document.querySelector(\"button[name='startButton']\");\nconst previousButton = document.querySelector(\"button[name='previousButton']\");\nconst nextButton = document.querySelector(\"button[name='nextButton']\");\nconst endButton = document.querySelector(\"button[name='endButton']\");\n\nconst shoppingList = getBooksFromLocalStorage();\n\nconst pageSize = 3;\n\nconst numberOfItemsInLocalStorage = shoppingList.length;\n\nlet totalPages = Math.ceil(numberOfItemsInLocalStorage / pageSize);\n\nlet currentPage = 1;\n\n// Check if paginationContainerPages is not null before interacting with it\nif (paginationContainerPages) {\n  for (let i = 1; i <= totalPages; i++) {\n    if (shoppingList.length <= 3) {\n      return;\n    }\n    const pageNumber = i;\n    const button = document.createElement('button');\n    button.classList.add('pagination_btn');\n    button.classList.add('pagination_btn--pages');\n    button.textContent = i;\n\n    activDisplayFlexOnElement(paginationContainerBackBtn);\n    activDisplayFlexOnElement(paginationContainerEndBtn);\n\n    button.addEventListener('click', () => {\n      currentPage = pageNumber;\n      removeDisableforElement(startButton);\n      removeDisableforElement(endButton);\n    });\n    paginationContainerPages.appendChild(button);\n  }\n\n  // Check if paginationContainerPages has child nodes before accessing the first child\n  if (paginationContainerPages.firstChild) {\n    paginationContainerPages.firstChild.classList.add('active');\n  }\n\n  paginationSection.addEventListener('click', handlerPaginationButtonsStartPreviousNextStart);\n}\n\nfunction handlerPaginationButtonsStartPreviousNextStart(event) {\n  const activButton = document.querySelector('.active');\n  console.log(event.target);\n  if (event.target.tagName !== 'BUTTON') {\n    return;\n  }\n\n  switch (event.target) {\n    case previousButton:\n      if (currentPage > 1) {\n        currentPage--;\n        removeDisableforElement(endButton);\n\n        activButton.classList.remove('active');\n        activButton.previousElementSibling.classList.add('active');\n      }\n      break;\n\n    case nextButton:\n      if (currentPage < totalPages) {\n        currentPage++;\n        removeDisableforElement(startButton);\n\n        activButton.classList.remove('active');\n        activButton.nextElementSibling.classList.add('active');\n      }\n      break;\n\n    case startButton:\n      currentPage = 1;\n      addDisableforElement(startButton);\n      removeDisableforElement(endButton);\n      highlighteTheCurrentPage(paginationContainerPages.firstChild);\n      break;\n\n    case endButton:\n      currentPage = totalPages;\n      addDisableforElement(endButton);\n      removeDisableforElement(startButton);\n      highlighteTheCurrentPage(paginationContainerPages.lastElementChild);\n      break;\n    default:\n      break;\n  }\n}\n\nfunction handleButtonPaginationContainerPages(event) {\n  if (event.target.tagName !== 'BUTTON') {\n    return;\n  }\n  highlighteTheCurrentPage(event.target);\n}\n\nfunction removeDisableforElement(element) {\n  if (element) {\n    element.disabled = false;\n  }\n}\n\nfunction addDisableforElement(element) {\n  if (element) {\n    element.disabled = true;\n  }\n}\n\nfunction activDisplayFlexOnElement(element) {\n  if (element) {\n    element.style.display = 'flex';\n  }\n}\n\nfunction highlighteTheCurrentPage(element) {\n  const activButton = document.querySelector('.active');\n\n  if (activButton) {\n    activButton.classList.remove('active');\n  }\n\n  if (element) {\n    element.classList.add('active');\n  }\n}\n","import './localStorage.js';\nimport './pagination.js';\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$lthku","paginationSection","document","querySelector","paginationContainerPages","paginationContainerBackBtn","paginationContainerEndBtn","startButton","previousButton","nextButton","endButton","shoppingList","getBooksFromLocalStorage","totalPages","Math","ceil","numberOfItemsInLocalStorage","length","currentPage","i","pageNumber","button","createElement","classList","add","textContent","activDisplayFlexOnElement","addEventListener","removeDisableforElement","appendChild","firstChild","event","activButton","console","log","target","tagName","remove","previousElementSibling","nextElementSibling","addDisableforElement","highlighteTheCurrentPage","lastElementChild","element","disabled","style","display"],"version":3,"file":"shopping-list.645333fe.js.map"}